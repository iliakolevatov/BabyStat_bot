# Libraties
import telebot
import pandas as pd
from datetime import datetime
import re

# Initialize the bot with its token
# Initialize the bot with its token
API_TOKEN = 'YOUR_TELEGRAM_BOT_API_TOKEN'  # Replace with your actual API token
bot = telebot.TeleBot(API_TOKEN)

# Create an empty DataFrame with specific data types
data = pd.DataFrame(columns=['feed_timestamp', 'feed', 'poo_timestamp', 'walk_timestamp', 'bath_timestamp'])
data = data.astype({'feed_timestamp': 'datetime64[s]', 'feed': 'float', 'poo_timestamp': 'datetime64[s]', 
                    'walk_timestamp': 'datetime64[s]', 'bath_timestamp': 'datetime64[s]'})

cumulative_csv_file_path = 'data_record.csv'  # Changed for consistency

# Function to save the data
def save_data(df):
    # Save to cumulative file
    # df.to_csv(cumulative_csv_file_path, index=False)
    # Determine the file name for today's data
    today_str = datetime.now().strftime('%Y-%m-%d')
    daily_csv_file_path = f'daily_data_{today_str}.csv'

    # Filter today's data
    today_data = df[df['feed_timestamp'].dt.date == datetime.now().date()]

    # Save today's data to its file
    if not today_data.empty:
        today_data.to_csv(daily_csv_file_path, index=False)

# Message handler
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global data
    data_updated = False
    # Check if the message starts with #feed
    if message.text.startswith('/feed'):
        # Extract numbers from the message
        numbers = re.findall(r'\d+', message.text)
        # Extract time from the message (format HH:MM)
        times = re.findall(r'\b([01]?[0-9]|2[0-3]):([0-5][0-9])\b', message.text)

        if numbers:
            # Convert the first number to an integer
            feed = int(numbers[0])

            # Use current date but replace time if specified in the message
            now = datetime.now()
            if times:
                hour, minute = map(int, times[0])
                feed_timestamp = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            else:
                feed_timestamp = now

            # Append the data to the DataFrame
            new_data = pd.DataFrame([[feed_timestamp, feed, pd.NaT]], columns=['feed_timestamp', 'feed', 'poo_timestamp'])
            data = pd.concat([data, new_data], ignore_index=True)

            # Save the DataFrame to CSV file
           # data.to_csv(csv_file_path, index=False)
            data_updated = True  
            # Acknowledge the user
            bot.reply_to(message, f"Recorded: {feed} ml at {feed_timestamp}")
    
    elif message.text.strip() == '/poo':
        # Use current date and time as the timestamp
        poo_timestamp = datetime.now()

        # Append the poo timestamp to the DataFrame
        new_data = pd.DataFrame([[pd.NaT, pd.NA, poo_timestamp]], columns=['feed_timestamp', 'feed', 'poo_timestamp'])
        data = pd.concat([data, new_data], ignore_index=True)

        # Save the DataFrame to CSV file
        #data.to_csv(csv_file_path, index=False)
        data_updated = True
        
        # Acknowledge the user
        bot.reply_to(message, f"Recorded poo event at {poo_timestamp}")

    elif message.text.strip() == '/walk':
        #  command for #walk recording
        walk_timestamp = datetime.now()
        new_data = pd.DataFrame([[pd.NaT, pd.NA, pd.NaT, walk_timestamp, pd.NaT]], columns=data.columns)
        data = pd.concat([data, new_data], ignore_index=True)
        #data.to_csv(csv_file_path, index=False)
        data_updated = True
        bot.reply_to(message, f"Recorded walk event at {walk_timestamp}")

    
    elif message.text.strip() == '/bath':
        #  command for #bath recording
        bath_timestamp = datetime.now()
        new_data = pd.DataFrame([[pd.NaT, pd.NA, pd.NaT, pd.NaT, bath_timestamp]], columns=data.columns)
        data = pd.concat([data, new_data], ignore_index=True)
        #data.to_csv(csv_file_path, index=False)
        data_updated = True
        bot.reply_to(message, f"Recorded bath event at {bath_timestamp}")  
        
    elif message.text.strip() == '/delete_feed':
        # Find the last row where 'feed_timestamp' and 'feed' are not null
        last_feed_index = data.dropna(subset=['feed_timestamp', 'feed']).last_valid_index()
        
        if last_feed_index is not None:
            # Capture the details of the record to be deleted
            deleted_record = data.loc[last_feed_index, ['feed_timestamp', 'feed']]
            deleted_timestamp = deleted_record['feed_timestamp']
            deleted_volume = deleted_record['feed']

            # Delete the record
            data = data.drop(last_feed_index)
            #data.to_csv(csv_file_path, index=False)
        

            # Inform the user about the deletion
            bot.reply_to(message, f"Deleted feed record: {deleted_volume} ml at {deleted_timestamp}.")
        else:
            bot.reply_to(message, "No feed record to delete.")
        data_updated = True
    elif message.text.strip() == '/help':
        help_message = (
            "Here are the commands you can use:\n"
            "/feed [quantity] [time] - Record feeding with the specified quantity (in ml) and optional time.\n"
            "/poo - Record a poo event with the current timestamp.\n"
            "/walk - Record a walk event with the current timestamp.\n"
            "/bath - Record a bath event with the current timestamp.\n"
            "/delete_feed - Delete the last feed record.\n"
            "/help - Get information about the available commands."
        )
        bot.reply_to(message, help_message)
    if data_updated:
        save_data(data)

# Start the bot
bot.polling()

